// Brute force

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.rbegin(),nums.rend());
        return nums[k-1];
    }
};

// Better using Max Heap

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int> pq;

        for(auto e:nums) pq.push(e);

        for(int i=0;i<k-1;i++){
            pq.pop();
        }
        return pq.top();
    }
};


// Optimal Using Min Heap

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int,vector<int> ,greater<int>> pq;

        for(int i=0;i<k;i++){
            pq.push(nums[i]);
        }

        for(int i=k;i<nums.size();i++){
            if(nums[i] > pq.top()){
                pq.pop();
                pq.push(nums[i]);
            }
        }
        return pq.top();
    }
};

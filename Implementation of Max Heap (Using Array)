#include <iostream>
using namespace std;

class Heap{
    public:
    int *arr;
    int capacity;
    int size;

    Heap(int cap):capacity(cap),size(0){
      arr = new int[capacity+1];
      arr[size] = -1;
    }


    // Insertion
    void insert(int value){
      if(size == capacity){
        cout<<"Heap overflow "<<endl;
        return;
      }
      size = size+1;
      int index = size;
      arr[index] = value;

      while(index > 1){
          int parentIndex= index/2;

          if(arr[index] > arr[parentIndex]){
            swap(arr[index] , arr[parentIndex]);
            index = parentIndex;
          }
          else{
            break;
          }
      }
    }

    // Deletion
    int deleteMax(){

      if(size == 0) {
        cout << "Heap is empty!" << endl;
        return -1;
      }

      int val = arr[1];

      arr[1] = arr[size];
      size--;

      int index = 1;
      while(index <= size){
        int left = 2*index;
        int right = 2*index + 1;

        int largest = index;
        if(left <= size && arr[largest] < arr[left]){
          largest = left;
        }
        if(right <= size && arr[largest] < arr[right]){
          largest = right;
        }

        if(largest == index){
          // value is already at correct position
          break;  
        }
        else{
          swap(arr[index],arr[largest]);
          index = largest;
        }
      }
      return val;
    }

    // Print
    void print() {
        for (int i = 0; i <= size; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }

    ~Heap() {
      delete[] arr;
    }
};

int main() {
  Heap h(10);

  h.insert(50);
  h.insert(30);
  h.insert(70);
  h.insert(40);
  h.insert(80);
  h.insert(100);

  

  cout<<"Printing Heap :"<<endl;
  h.print();

  cout<<"deleting value from Heap :"<<h.deleteMax();
  cout<<endl;

  cout<<"Printing Heap after deletion:"<<endl;
  h.print();




  return 0;
}

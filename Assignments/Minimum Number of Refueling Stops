class Solution {
public:
    
    int minRefuelStops(int target, int startFuel, vector<vector<int>>& stations) {
        int stops= 0;
        int dist = 0;
        int i= 0;
        int fuel = startFuel;
        priority_queue<pair<int,int>> pq; //fuel,pos

        while(true){
            while(i < stations.size()){
                if(stations[i][0] <= fuel + dist){
                    pq.push({stations[i][1],stations[i][0]});
                }
                else{
                    break;
                }
                i++;
            }
            // travel with full fuel
            dist += fuel;
            fuel = 0;
            if(dist >= target) break;
            
            if(pq.empty()){
                stops = -1;
                break;
            }
            // refuel and re-adjust fuel based on distance travelled
            auto top = pq.top();
            fuel = (dist - top.second) + top.first;
            dist = top.second;
            pq.pop();
            stops++;
        }
        return stops;
    }
};
